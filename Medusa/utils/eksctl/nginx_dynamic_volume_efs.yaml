apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: efs-storage-class
provisioner: efs.csi.aws.com # kubernetes.io/aws-ebs
parameters:
  type: gp3 # gp2
reclaimPolicy: Retain
allowVolumeExpansion: true
volumeBindingMode: Immediate
---
apiVersion: v1
kind: Namespace
metadata:
  name: nginx-app-efs
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nginx-dynamic-pvc-efs
  namespace: nginx-app-efs
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: efs-storage-class
  resources:
    requests:
      storage: 100Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment-efs
  namespace: nginx-app-efs
spec:
  selector:
    matchLabels:
      app: nginx-efs
  replicas: 1
  template:
    metadata:
      labels:
        app: nginx-efs
    spec:
      containers:
        - name: nginx-efs
          image: nginx-efs
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-dynamic-storage-efs
              mountPath: /usr/share/nginx/html
      volumes:
        - name: nginx-dynamic-storage-efs
          persistentVolumeClaim:
            claimName: nginx-dynamic-pvc-efs
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: alpha.eksctl.io/nodegroup-name
                    operator: In
                    values:
                      - nodegroup2
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service-efs
  namespace: nginx-app-efs
spec:
  selector:
    app: nginx-efs
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
