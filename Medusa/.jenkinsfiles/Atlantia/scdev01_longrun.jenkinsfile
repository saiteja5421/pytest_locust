pipeline {
    agent {
        label 'SamVaasAgent'
    }

    options {
        timestamps()
        buildDiscarder logRotator(artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '7',
                daysToKeepStr: '',
                numToKeepStr: '7')
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }

    parameters {
        string(defaultValue: 'v1.0-scdev01',
                description: 'Default value is v1.0-scdev01, type your tag name if you want to run build with a specific tag',
                name: 'TAG_NAME',
                trim: true)
        string(defaultValue: '25',
                description: 'Number of times the CRUD workflow should be executed',
                name: 'ITERATION',
                trim: true)
        booleanParam(defaultValue: true,
                description: 'Send emails with the build status (true) or not (false)',
                name: 'SEND_EMAILS')
        string(defaultValue: 'ruben.kumar@hpe.com, sachin.uplaonkar@hpe.com, mark.balunis@hpe.com, tata@hpe.com',
                description: 'Email address list to specify who should receive email about current build',
                name: 'EMAIL_LIST')
        booleanParam(defaultValue: true,
                description: 'Run test suite with (true) or without (false) using Report Portal flag',
                name: 'ENABLE_REPORT_PORTAL')
    }

    environment {
        CONTAINER_NAME = "atlantia_e2e_scdev01_longrun"
    }

    stages {
        stage('Checkout Repository') {
            steps {
                // git branch: "${params.BRANCH_NAME}", credentialsId: 'nmbljenkins', url: 'https://github.hpe.com/nimble/qa_automation.git'
                checkout(
                            [$class: 'GitSCM',
                            branches: [[name: "${params.TAG_NAME}"]],
                            userRemoteConfigs: [[credentialsId: 'nmbljenkins', url: 'https://github.hpe.com/nimble/qa_automation.git']]]
                        )
            }
        }
        stage('Copy Credentials') 
        {
            steps
            {
                withCredentials([file(credentialsId: 'longrun_082075191137_west_2', variable: 'environment')]) {
                sh ''' 
                cp $environment $WORKSPACE/Medusa/.env
                chmod +x $WORKSPACE/Medusa/.env
                '''
                }

            }
        }
        stage('Run Long Running Test') {
            steps {
                script {
                    sh "ls $WORKSPACE"
                    def command = "docker run -w /Medusa --name ${env.CONTAINER_NAME} --pull always --env-file $WORKSPACE/Medusa/.env -e SERVICE_VERSION='service2' -e CONFIG_FILE='variables_long_running_scdev01' -e ITERATION=${params.ITERATION} -v $WORKSPACE/Medusa:/Medusa hub.docker.hpecorp.net/atlantia-qa/regression:atlantia-e2e pytest -sv -c configs/atlantia/pytest/pytest_long_running_scdev01.ini --junitxml=logs/junit.xml"
                    if (params.ENABLE_REPORT_PORTAL) {
                        sh "${command} --reportportal /Medusa/tests/e2e/aws_protection/test_long_running"
                    } else {
                        sh "${command} /Medusa/tests/e2e/aws_protection/test_long_running"
                        }
                    }   
                }
            }
        }
    post {
        always {
            script {
                try {
                    echo "Attempting to stop ${env.CONTAINER_NAME} container:"
                    sh "docker stop ${env.CONTAINER_NAME}"
                    echo "${env.CONTAINER_NAME} stopped."
                } catch (err) {
                    echo "Container ${env.CONTAINER_NAME} is not running."
                }

                try {
                    echo "Attempting to extract test logs from ${env.CONTAINER_NAME} container:"
                    sh "docker cp ${env.CONTAINER_NAME}:/Medusa/tests/e2e/aws_protection/test_long_running/logs/test_run.log ${WORKSPACE}/${env.BUILD_NUMBER}_test_run.log"
                    archiveArtifacts artifacts: "${env.BUILD_NUMBER}_test_run.log", followSymlinks: false
                } catch (err) {
                    echo "Logs are not present in container ${env.CONTAINER_NAME}, unable to export artifact."
                }

                def testResults = ""

                try {
                    echo "Attempting to extract junit xml report from ${env.CONTAINER_NAME} container:"
                    sh "docker cp ${env.CONTAINER_NAME}:/Medusa/tests/atlantia_e2e/logs/junit.xml ${WORKSPACE}/${env.BUILD_NUMBER}_junit.xml"
                    def summary = junit allowEmptyResults: true, healthScaleFactor: 0.0, skipPublishingChecks: true, testResults: "${env.BUILD_NUMBER}_junit.xml"
                    testResults = "\n\nTest Summary\n---\nTotal: ${summary.totalCount}\nPassed: ${summary.passCount}\nFailures: ${summary.failCount}\nSkipped: ${summary.skipCount}"
                } catch  (err) {
                    echo "XML test report is not present in container ${env.CONTAINER_NAME}, unable to extract results."
                }

                try {
                    echo "Attempting to remove ${env.CONTAINER_NAME} container:"
                    sh "docker rm ${env.CONTAINER_NAME}"
                    echo "${env.CONTAINER_NAME} removed."
                } catch (err) {
                    echo "Container ${env.CONTAINER_NAME} does not exist."
                }

                try {
                    echo "Attempting to remove dangling images using 'docker image prune -f'"
                    sh "docker image prune -f"
                    echo "Removed dangling images"
                } catch (err) {
                    echo "Failed to remove dangling images from the system"
                }

                cleanWs()

                if (params.SEND_EMAILS) {
                    def emailSubject = "${env.JOB_NAME} ${env.BUILD_NUMBER} - Status ${currentBuild.result}"
                    def emailBodyTemplate = """
                    Build ran on branch: ${params.BRANCH_NAME}
                    Are logs on Report Portal?: ${params.ENABLE_REPORT_PORTAL}

                    Link to build: ${env.BUILD_URL}
                    Link to console: ${env.BUILD_URL}console
                    Link to artifact: ${env.BUILD_URL}artifact
                    """.stripIndent()

                    emailBodyTemplate += testResults

                    mail body: emailBodyTemplate, subject: emailSubject, to: params.EMAIL_LIST
                }

                color = [SUCCESS: "good",
                         FAILURE: "danger"]
                        .get(currentBuild.currentResult, "warning")


                // Send notification to slack
                // slackSend (message: "${env.JOB_NAME} ${env.BUILD_NUMBER} - ${currentBuild.result}\n${env.BUILD_URL}console\n${testResults}",
                //            channel: 'jenkins_notifications',
                //            teamDomain: 'hpe-internal',
                //            tokenCredentialId: 'slack-notificaitons',
                //            color: "${color}",
                //            iconEmoji: ':hpe-bot')

            }
        }
    }
}