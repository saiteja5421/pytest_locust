// cxo-jenkins

def list_testcases = 'prod_teardown'
def dep_regions = []
def testResults = ""
CONTAINER_NAME = "atlantia_e2e_prod_sanity"
AWS_PROD_US = "675801528755"
AWS_PROD_EU = "067712410417"
AWS_PROD_AP = "932840004621"
AWS_PROD_UK = "434145311388"
AWS_PROD_RANDOM = "797176473325"


def generateRegressionTestStage(region, list_testcases) {
    return {
        stage("TESTS_${region.toUpperCase()}") {
            def credentials_aws_one = "${AWS_PROD_RANDOM}"
            def credentials_aws_two = "${AWS_PROD_RANDOM}"
            if (region.toUpperCase() == "US"){
                credentials_aws_one = "${AWS_PROD_US}"
            }
            if (region.toUpperCase() == "EU"){
                credentials_aws_one = "${AWS_PROD_EU}"
            }
            if (region.toUpperCase() == "AP"){
                credentials_aws_one = "${AWS_PROD_AP}"
            }
            if (region.toUpperCase() == "UK"){
                credentials_aws_one = "${AWS_PROD_UK}"
            }
            def random_name = ""
            if (region.toUpperCase() == "RANDOM_REGIONS"){
                random_name = "_random_regions"
                Random rnd = new Random()
                def all_regions = ["us","eu","ap","uk"]
                region = all_regions[rnd.nextInt(all_regions.size())]
                list_testcases = 'prod_sanity'
            }
            echo "Suite markers: ${list_testcases}"
            echo "Credentails AWS ONE: ${credentials_aws_one}"
            echo "Credentails AWS TWO: ${credentials_aws_two}"

            def container = "${CONTAINER_NAME}_${credentials_aws_one}"

            dir("${env.WORKSPACE}-${env.BUILD_NUMBER}") {	
                withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        accessKeyVariable: 'ACCOUNT_ONE_AWS_KEY_ID',
                        credentialsId: "${credentials_aws_one}",
                        secretKeyVariable: 'ACCOUNT_ONE_AWS_SECRET_KEY'
                    ]]) {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        accessKeyVariable: 'ACCOUNT_TWO_AWS_KEY_ID',
                        credentialsId: "${credentials_aws_two}",
                        secretKeyVariable: 'ACCOUNT_TWO_AWS_SECRET_KEY'
                    ]]) {
                    withCredentials([string(credentialsId: 'RP_API_KEY', variable: 'RP_API_KEY')]) {
                        try {
                            dir("${env.WORKSPACE}-${env.BUILD_NUMBER}")
                            {
                                def rp_description = "'Atlantia PROD B&R sanity build: ${env.BUILD_NUMBER}'"
                                report_portal = "--reportportal --rp-launch SANITY_PROD${random_name.toUpperCase()}_${region.toUpperCase()} --rp-launch-description ${rp_description}"
                                def command = "docker run -w /Medusa --name ${container} --pull always -e RP_API_KEY=$RP_API_KEY -e ACCOUNT_ONE_AWS_KEY_ID='${env.ACCOUNT_ONE_AWS_KEY_ID}' -e ACCOUNT_ONE_AWS_SECRET_KEY='${env.ACCOUNT_ONE_AWS_SECRET_KEY}' -e ACCOUNT_TWO_AWS_KEY_ID='${env.ACCOUNT_TWO_AWS_KEY_ID}' -e ACCOUNT_TWO_AWS_SECRET_KEY='${env.ACCOUNT_TWO_AWS_SECRET_KEY}' -e SERVICE_VERSION='service2' -e CONFIG_FILE='variables_sanity_prod_${region}' -v ${env.WORKSPACE}-${env.BUILD_NUMBER}/Medusa:/Medusa hub.docker.hpecorp.net/atlantia-qa/regression:atlantia-e2e pytest --log-file=logs_${region}${random_name}/test_run_${region}${random_name}.log --junitxml=logs_${region}${random_name}/junit_${region}${random_name}.xml -sv -m '${list_testcases}' -c configs/atlantia/pytest/pytest_sanity_prod.ini ${report_portal} tests/e2e/aws_protection"
                                sh "${command}"
                            }
                        } catch (Exception e) {
                                echo "Error: ${e}"
                        }

                        try {
                            echo "Attempting to archive test log ${region}${random_name}"
                            archiveArtifacts artifacts: "Medusa/logs_${region}${random_name}/test_run_${region}${random_name}.log", followSymlinks: false
                        } catch (Exception e) {
                            echo "Logs are not present in container Medusa/logs_${region}${random_name}/test_run_${region}${random_name}.log, unable to export artifact."
                            echo "Error: ${e}"
                        }
                        
                        try {
                            echo "Attempting to extract junit xml report from  Medusa/logs_${region}${random_name}/junit_${region}${random_name}.xml container:"
                            def summary = junit allowEmptyResults: true, healthScaleFactor: 0.0, skipPublishingChecks: true, testResults: "Medusa/logs_${region}${random_name}/junit_${region}${random_name}.xml"
                            currentBuild.description += "\n|${region.toUpperCase()}${random_name.toUpperCase()} | Total: ${summary.totalCount} | Passed: ${summary.passCount} | Failures: ${summary.failCount} | Skipped: ${summary.skipCount} |"
                        } catch  (Exception e) {
                            echo "XML test report is not present in container, unable to extract results."
                            echo "Error: ${e}"
                        }
                    }
                }}
            }
        }
    }
}

def generateStopRegressionTestStage(account_id) {
    return {
        stage("Stop Container: ${account_id}") {
            def container = "${CONTAINER_NAME}_${account_id}"
            try {
                echo "Attempting to stop ${container} container:"
                sh "docker stop ${container}"
                echo "${container} stopped."
            } catch (err) {
                echo "Container ${container} is not running."
            }

            try {
                echo "Attempting to remove ${container} container:"
                sh "docker rm ${container}"
                echo "${container} removed."
            } catch (err) {
                echo "Container ${container} does not exist."
            }
        }
    }
}

pipeline {
    agent {
        label 'atlantia-jenkins'
    }

    options {
        timestamps()
        buildDiscarder logRotator(artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '20',
                daysToKeepStr: '',
                numToKeepStr: '20')
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    // DO not setup cron on cxo-jenkins to:
    // 18:00 - eks automatic refresh is planned
    triggers {
        cron '0 17 * * *'
    }

    parameters {
        string(defaultValue: 'refs/tags/v1.8-prod-tag',
                description: 'Type your git ref if you want to run build using a specific tag or branch.',
                name: 'TAG',
                trim: true)
        separator name: 'separator-c726b08e-4d6f-464b-91ad-dca7d1e26aa1', sectionHeader: 'CHOOSE DEPLOYMENT REGIONS:'
        separator name: 'separator-c726b08e-4d6f-464b-91ad-dca7d1e26aa1', sectionHeader: '(if you select more than one, then all regions will be executed parallel)'
        separator name: 'separator-c726b08e-4d6f-464b-91ad-dca7d1e26aa2', sectionHeader: ''
        booleanParam(defaultValue: true,
                description: 'US1',
                name: 'US')
        booleanParam(defaultValue: true,
                description: 'EU1',
                name: 'EU')
        booleanParam(defaultValue: true,
                description: 'JP1',
                name: 'AP')
        booleanParam(defaultValue: true,
                description: 'UK1',
                name: 'UK')
        separator name: 'separator-c726b08e-4d6f-464a-91ad-dca7d1e26aa1', sectionHeader: 'CHOOSE PROD TESTCASES:'
        separator name: 'separator-c726b08e-4d6f-464a-91ad-dca7d1e26aa3', sectionHeader: ''
        booleanParam(defaultValue: true,
                description: 'remove stack',
                name: 'STACK')
        booleanParam(defaultValue: true,
                description: 'upload stack if removed and revalidate accounts',
                name: 'ACCOUNT')
        booleanParam(defaultValue: true,
                description: 'unassign from polices, delete old standard assets, create new standard assets with protection groups, assign to protection policy, inv sync',
                name: 'INVENTORY')
        booleanParam(defaultValue: true,
                description: 'unassign old protection policy from standard assets, create new protection policy, assign standard assets, inv sync',
                name: 'PROTECTION_POLICY')
        booleanParam(defaultValue: true,
                description: 'create only native backup',
                name: 'NATIVE_BACKUP')
        booleanParam(defaultValue: true,
                description: 'create restore form last native backup',
                name: 'NATIVE_RESTORE')
        booleanParam(defaultValue: true,
                description: 'create restore form last cloud backup',
                name: 'CLOUD_RESTORE')
        separator name: 'separator-c726b08e-4d6f-464a-91ad-dca7d1e26aa4', sectionHeader: 'CHOOSE CANARY TESTCASES:'
        separator name: 'separator-c726b08e-4d6f-464a-91ad-dca7d1e26aa3', sectionHeader: ''
        booleanParam(defaultValue: true,
                description: 'verify all tasks and schedules from last week',
                name: 'TASKS_CANARY')
        booleanParam(defaultValue: true,
                description: 'refresh inventory and verify long-lived protection policies, protection groups, and assignments',
                name: 'INVENTORY_CANARY')
        booleanParam(defaultValue: true,
                description: 'restore random backup from long-lived ec2 and ebs',
                name: 'CLOUD_RESTORE_CANARY')
        booleanParam(defaultValue: true,
                description: 'flr restore random backup from long-lived ec2 and ebs',
                name: 'CLOUD_RESTORE_GFRS_CANARY')
        separator name: 'separator-c726b08e-4d6f-464a-91ad-dca7d1e26aa4', sectionHeader: 'CHOOSE COMMON TESTCASES:'
        separator name: 'separator-c726b08e-4d6f-464a-91ad-dca7d1e26aa3', sectionHeader: ''
        booleanParam(defaultValue: true,
                description: 'verify dashboard statistics',
                name: 'DASHBOARD')
        separator name: 'separator-c726b08e-4d6f-464a-91ad-dca7d1e26a12', sectionHeader: ''
        separator name: 'separator-c726b08e-4d6f-464a-91ad-dca7d1e26a12', sectionHeader: 'Executed only with periodical trigger:'
        separator name: 'separator-c726b08e-4d6f-464a-91ad-dca7d1e26aa3', sectionHeader: '1. Create cloud backup for above regions (EU/UK/US/JP) (it will wait till midnight to complete)'
        separator name: 'separator-c726b08e-4d6f-464a-91ad-dca7d1e26a13', sectionHeader: '2. RANDOM_REGIONS prod suite (same as filepoc/scdev01/sciny) - Random deployment region (EU/UK/US/JP). It will run whole sanity suite including register/unregister account and cloud backup. '
    }

    stages {
        stage("Run Sanity Tests") {
            stages{
                stage("Build suite configuration") {
                    steps {
                        script {
                            def cause = "${currentBuild.getBuildCauses()[0].shortDescription}"
                            echo "Build cause: ${cause}"

                            list_testcases += params.STACK ? ' or prod_stack_remove' : ''
                            list_testcases += params.ACCOUNT ? ' or prod_account' : ''
                            list_testcases += params.INVENTORY ? ' or prod_inventory' : ''
                            list_testcases += params.TASKS_CANARY ? ' or prod_canary_tasks' : ''
                            list_testcases += params.INVENTORY_CANARY ? ' or prod_canary_inventory' : ''
                            list_testcases += params.PROTECTION_POLICY ? ' or prod_policy' : ''
                            list_testcases += params.NATIVE_BACKUP ? ' or prod_backup' : ''
                            list_testcases += params.NATIVE_RESTORE ? ' or prod_native_restore' : ''
                            if ( cause.toString().contains('timer') ){
                                list_testcases += ' or prod_cloud_backup'
                                list_testcases += ' or prod_canary_cloud_backup'
                                list_testcases += ' or prod_wait_cloud_backup'
                            }
                            list_testcases += params.CLOUD_RESTORE ? ' or prod_cloud_restore' : ''
                            list_testcases += params.CLOUD_RESTORE_CANARY ? ' or prod_canary_cloud_restore' : ''
                            list_testcases += params.CLOUD_RESTORE_GFRS_CANARY ? ' or prod_canary_cloud_gfrs_restore' : ''
                            list_testcases += params.DASHBOARD ? ' or prod_dashboard' : ''

                            if (params.US){
                                dep_regions.add("us")
                            }
                            if (params.EU){
                                dep_regions.add("eu")
                            }
                            if (params.AP){
                                dep_regions.add("ap")
                            }
                            if (params.UK){
                                dep_regions.add("uk")
                            }
                            if ( cause.toString().contains('timer') ){
                                dep_regions.add("random_regions")
                            }

                            echo "Suite markers: ${list_testcases}"
                            echo "Suite deployments regions: ${dep_regions}"
                        }
                    }
                }
                stage("Checkout Repository") {
                    steps {
                        script {
                            try {
                                dir("${env.WORKSPACE}-${env.BUILD_NUMBER}")
                                {
                                    checkout(
                                        [$class: 'GitSCM',
                                        branches: [[name: "${params.TAG}"]],
                                        extensions: [cloneOption(noTags: false, reference: '', shallow: true, timeout: 30)],
                                        userRemoteConfigs: [[credentialsId: 'nmbljenkins', url: 'https://github.hpe.com/nimble/qa_automation.git']]]
                                    )
                                }
                            } catch (Exception e) {
                                    echo "Error: ${e}"
                            }
                        }
                    }
                }
                stage("Update Client and Secret IDs") {
                    steps {
                        dir("${env.WORKSPACE}-${env.BUILD_NUMBER}") {
                            script {
                                def regions = ['us', 'ap', 'eu', 'uk']
                                // Get secret id for all users from Jenkins using client id stored as credentialId
                                // Secret text format <client id>,<secret id>
                                regions.each { region ->
                                    def config_file = "variables_sanity_prod_" + "${region}" + ".ini"
                                    echo "Adding credentials for ${config_file}"
                                    user_one = "user_one_" + "${region}" + "_sanity"
                                    user_two = "user_two_" + "${region}" + "_sanity"
                                    user_three = "user_three_" + "${region}" + "_sanity"
                                    withCredentials([string(credentialsId: user_one, variable: 'USER_ONE_CRED'), string(credentialsId: user_two, variable: 'USER_TWO_CRED'), string(credentialsId: user_three, variable: 'USER_THREE_CRED')]) {
                                        // Execute Python script to update the client and secret ids in the config file
                                        echo "Adding credentials for ${config_file}"
                                        sh """
                                        python3 Medusa/utils/update_config_file.py $config_file admin $USER_ONE_CRED $USER_TWO_CRED $USER_THREE_CRED
                                        """                     
                                    }
                                }
                            }
                        }
                    }
                }
                stage('Copy private key') {
                    steps {
                        withCredentials([file(credentialsId: 'private-ssh-key', variable: 'key_pair_prod')]) {
                        sh ''' 
                        cp $key_pair_prod $WORKSPACE-$BUILD_NUMBER/Medusa/key_pair_prod_kg_api-automation-1_us-east-1_675801528755.pem
                        cp $key_pair_prod $WORKSPACE-$BUILD_NUMBER/Medusa/key_pair_prod_kg_api-automation-1_us-east-1_067712410417.pem
                        cp $key_pair_prod $WORKSPACE-$BUILD_NUMBER/Medusa/key_pair_prod_kg_api-automation-1_us-east-1_932840004621.pem
                        cp $key_pair_prod $WORKSPACE-$BUILD_NUMBER/Medusa/key_pair_prod_kg_api-automation-1_us-east-1_434145311388.pem
                        '''
                        }
                    }
                }
                stage("Parallel Region Test Exeution"){
                    steps {
                        script {
                            currentBuild.description = ""
                            echo "Suite markers: ${list_testcases}"
                            echo "Suite deployments regions: ${dep_regions}"

                            def parallelRegressionTestSuites = dep_regions.collectEntries {
                                ["${it}" : generateRegressionTestStage(it, list_testcases)]
                            }
                            parallel parallelRegressionTestSuites
                        }
                    }
                }
            }
            
        }
    }
    post {
        always {
            script {
                generateStopRegressionTestStage("${AWS_PROD_US}").call()
                generateStopRegressionTestStage("${AWS_PROD_EU}").call()
                generateStopRegressionTestStage("${AWS_PROD_AP}").call()
                generateStopRegressionTestStage("${AWS_PROD_UK}").call()
                generateStopRegressionTestStage("${AWS_PROD_RANDOM}").call()

                try {
                    echo "Attempting to remove dangling images using 'docker image prune -f'"
                    sh "docker image prune -f"
                    echo "Removed dangling images"
                } catch (err) {
                    echo "Failed to remove dangling images from the system"
                }

                cleanWs()
                
                color = [SUCCESS: "good",
                    FAILURE: "danger"]
                   .get(currentBuild.currentResult, "warning")


                // Send notification to slack
                slackSend (message: "${currentBuild.description}",
                           channel: 'jenkins_sc_pqa_notification',
                           teamDomain: 'hpe-internal',
                           tokenCredentialId: 'slack-notificaitons',
                           color: "${color}",
                           iconEmoji: ':hpe-bot')

            }
        }
    }
}