# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import cvsamanager_pb2 as ring__of__power_dot_cross__cluster_dot_cvsamanager_dot_v1alpha1_dot_cvsamanager__pb2


class CVSAManagerCrossClusterServiceStub(object):
    """CVSAManagerCrossClusterService defines API for the communication between Primary Service running in the Ring of Power
    cluster and Secondary Services running in the DSCC clusters.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TriggerCVSAMaintenanceOperation = channel.unary_unary(
            "/ring_of_power.cross_cluster.cvsamanager.v1alpha1.CVSAManagerCrossClusterService/TriggerCVSAMaintenanceOperation",
            request_serializer=ring__of__power_dot_cross__cluster_dot_cvsamanager_dot_v1alpha1_dot_cvsamanager__pb2.TriggerCVSAMaintenanceOperationRequest.SerializeToString,
            response_deserializer=ring__of__power_dot_cross__cluster_dot_cvsamanager_dot_v1alpha1_dot_cvsamanager__pb2.TriggerCVSAMaintenanceOperationResponse.FromString,
        )
        self.ListCVSAs = channel.unary_unary(
            "/ring_of_power.cross_cluster.cvsamanager.v1alpha1.CVSAManagerCrossClusterService/ListCVSAs",
            request_serializer=ring__of__power_dot_cross__cluster_dot_cvsamanager_dot_v1alpha1_dot_cvsamanager__pb2.ListCVSAsRequest.SerializeToString,
            response_deserializer=ring__of__power_dot_cross__cluster_dot_cvsamanager_dot_v1alpha1_dot_cvsamanager__pb2.ListCVSAsResponse.FromString,
        )


class CVSAManagerCrossClusterServiceServicer(object):
    """CVSAManagerCrossClusterService defines API for the communication between Primary Service running in the Ring of Power
    cluster and Secondary Services running in the DSCC clusters.
    """

    def TriggerCVSAMaintenanceOperation(self, request, context):
        """TriggerCVSAMaintenanceOperation allows to control maintenance operations for cVSA instances."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListCVSAs(self, request, context):
        """ListCVSAs lists cVSA instances to trigger maintenance operations."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CVSAManagerCrossClusterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "TriggerCVSAMaintenanceOperation": grpc.unary_unary_rpc_method_handler(
            servicer.TriggerCVSAMaintenanceOperation,
            request_deserializer=ring__of__power_dot_cross__cluster_dot_cvsamanager_dot_v1alpha1_dot_cvsamanager__pb2.TriggerCVSAMaintenanceOperationRequest.FromString,
            response_serializer=ring__of__power_dot_cross__cluster_dot_cvsamanager_dot_v1alpha1_dot_cvsamanager__pb2.TriggerCVSAMaintenanceOperationResponse.SerializeToString,
        ),
        "ListCVSAs": grpc.unary_unary_rpc_method_handler(
            servicer.ListCVSAs,
            request_deserializer=ring__of__power_dot_cross__cluster_dot_cvsamanager_dot_v1alpha1_dot_cvsamanager__pb2.ListCVSAsRequest.FromString,
            response_serializer=ring__of__power_dot_cross__cluster_dot_cvsamanager_dot_v1alpha1_dot_cvsamanager__pb2.ListCVSAsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "ring_of_power.cross_cluster.cvsamanager.v1alpha1.CVSAManagerCrossClusterService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class CVSAManagerCrossClusterService(object):
    """CVSAManagerCrossClusterService defines API for the communication between Primary Service running in the Ring of Power
    cluster and Secondary Services running in the DSCC clusters.
    """

    @staticmethod
    def TriggerCVSAMaintenanceOperation(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ring_of_power.cross_cluster.cvsamanager.v1alpha1.CVSAManagerCrossClusterService/TriggerCVSAMaintenanceOperation",
            ring__of__power_dot_cross__cluster_dot_cvsamanager_dot_v1alpha1_dot_cvsamanager__pb2.TriggerCVSAMaintenanceOperationRequest.SerializeToString,
            ring__of__power_dot_cross__cluster_dot_cvsamanager_dot_v1alpha1_dot_cvsamanager__pb2.TriggerCVSAMaintenanceOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListCVSAs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ring_of_power.cross_cluster.cvsamanager.v1alpha1.CVSAManagerCrossClusterService/ListCVSAs",
            ring__of__power_dot_cross__cluster_dot_cvsamanager_dot_v1alpha1_dot_cvsamanager__pb2.ListCVSAsRequest.SerializeToString,
            ring__of__power_dot_cross__cluster_dot_cvsamanager_dot_v1alpha1_dot_cvsamanager__pb2.ListCVSAsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
